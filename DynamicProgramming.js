// 동적 프로그래밍
// 복잡한 문제를 더 간단한 하위 문제의 모음으로 쪼개서 각 하위 문제들을 풀어 그 답을 저장하는 방식.
// 동적 : 문제가 시간에 따라 달라지는 양상을 묘사

// 동적 프로그래밍을 주어진 문제에 사용할 수 있다는 두 가지 신호.
// 반복되는 하위 문제
// 최적 부분 구조

// 중복되는/반복되는 문제
// 동적 프로그래밍을 사용하기 위해서는 중첩되는 하위 문제가 있어야 함.
// = 한 문제를 작은 문제들로 나눌 수 있고 그 조각 중 일부가 재활용이 가능해야 함

// 최적 부분 구조
// 하위 문제의 최적 해답을 통해 더 큰 범주의 문제의 최적 해답을 구성할 수 있는 경우

// 피보나치 수열
// 재귀적 솔루션
function fib(n){
  if(n<=2) return 1;
  return fib(n-1) + fib(n-2);
}

// 시간 복잡도 : O(2^n)